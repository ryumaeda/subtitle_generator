{
  "key": "screensList",
  "value": [
    {
      "component": "Googleログインボタン エラーメッセージ表示エリア",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "operatingProcedure": "1. Googleログインボタンをクリック\n2. Googleアカウントを選択または入力\n3. 認証が成功すると自動的にホーム画面に遷移",
      "description": "ユーザーがシステムにログインするための画面",
      "id": "SCR-001",
      "screenName": "ログイン画面",
      "category": "認証",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": []
    },
    {
      "component": "ナビゲーションメニュー 最近の活動サマリー ヘルプ・ガイドへのリンク",
      "accessRight": "ログインユーザー",
      "fileName": "index.tsx",
      "operatingProcedure": "1. 目的の機能（字幕生成・学習）を選択\n2. 選択した機能の画面に遷移",
      "description": "ログイン後のメイン画面 各機能へのアクセスポイント",
      "id": "SCR-002",
      "screenName": "ホーム画面",
      "category": "メイン",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": []
    },
    {
      "component": "動画アップロードエリア 字幕デザイン設定パネル フィルター設定パネル 変換実行ボタン プログレスバー",
      "accessRight": "ログインユーザー",
      "fileName": "subtitle-generation.tsx",
      "operatingProcedure": "1. 動画をアップロード\n2. 字幕デザインを設定\n3. フィルターを設定\n4. 変換を実行\n5. 変換完了後 ダウンロードボタンが表示される",
      "description": "動画をアップロードし字幕を生成する画面",
      "id": "SCR-003",
      "screenName": "字幕生成画面",
      "category": "字幕生成",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": [
        {
          "fileName": "speech-to-text.ts",
          "handleProcedure": "1. S3バケットから動画ファイルを取得\n2. 音声抽出ライブラリを使用して音声データを抽出\n3. 音声認識APIを使用してテキストに変換\n4. 変換結果をJSONファイルとして保存\n5. 保存したJSONファイルのURLを返す",
          "relatedScreen": "SCR-003",
          "handleName": "音声テキスト変換",
          "description": "アップロードされた動画ファイルの音声をテキストに変換する",
          "id": "BAC-001",
          "category": "変換処理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FaUpload, FaFont, FaFilter, FaPlay, FaDownload } from 'react-icons/fa';\n\nconst SubtitleGeneration = () => {\n  const router = useRouter();\n  const [videoFile, setVideoFile] = useState<File | null>(null);\n  const [subtitleDesign, setSubtitleDesign] = useState({\n    font: 'Noto Sans JP',\n    size: 16,\n    color: '#FFFFFF',\n    backgroundColor: '#000000',\n  });\n  const [filter, setFilter] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [downloadUrl, setDownloadUrl] = useState('');\n\n  useEffect(() => {\n    // ユーザーの認証状態を確認\n    const checkAuth = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setVideoFile(event.target.files[0]);\n    }\n  };\n\n  const handleSubtitleDesignChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setSubtitleDesign({ ...subtitleDesign, [e.target.name]: e.target.value });\n  };\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.target.value);\n  };\n\n  const handleConvert = async () => {\n    if (!videoFile) return;\n\n    setProgress(0);\n    setDownloadUrl('');\n\n    try {\n      // 音声テキスト変換\n      const formData = new FormData();\n      formData.append('video', videoFile);\n      const { data: speechToTextData } = await axios.post('/api/speech-to-text', formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n          setProgress(percentCompleted / 4);\n        },\n      });\n\n      // 字幕ファイル生成\n      const { data: subtitleFileData } = await axios.post('/api/generate-subtitle-file', {\n        textData: speechToTextData,\n        subtitleDesign,\n        filter,\n      });\n      setProgress(50);\n\n      // 要点抽出字幕生成\n      const { data: summarizedSubtitlesData } = await axios.post('/api/generate-summarized-subtitles', {\n        subtitleData: subtitleFileData,\n      });\n      setProgress(75);\n\n      // 話者別字幕スタイル適用\n      const { data: finalSubtitlesData } = await axios.post('/api/apply-speaker-styles', {\n        subtitleData: summarizedSubtitlesData,\n      });\n      setProgress(100);\n\n      setDownloadUrl(finalSubtitlesData.url);\n    } catch (error) {\n      console.error('変換エラー:', error);\n      alert('変換中にエラーが発生しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">字幕生成画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaUpload className=\"mr-2\" /> 動画アップロード\n          </h2>\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleVideoUpload}\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFont className=\"mr-2\" /> 字幕デザイン設定\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block mb-2\">フォント</label>\n              <select\n                name=\"font\"\n                value={subtitleDesign.font}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              >\n                <option value=\"Noto Sans JP\">Noto Sans JP</option>\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Helvetica\">Helvetica</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block mb-2\">サイズ</label>\n              <input\n                type=\"number\"\n                name=\"size\"\n                value={subtitleDesign.size}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">文字色</label>\n              <input\n                type=\"color\"\n                name=\"color\"\n                value={subtitleDesign.color}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">背景色</label>\n              <input\n                type=\"color\"\n                name=\"backgroundColor\"\n                value={subtitleDesign.backgroundColor}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFilter className=\"mr-2\" /> フィルター設定\n          </h2>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={handleFilterChange}\n            placeholder=\"フィルターワードをカンマ区切りで入力\"\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <button\n          onClick={handleConvert}\n          className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded flex items-center justify-center mb-8\"\n        >\n          <FaPlay className=\"mr-2\" /> 変換実行\n        </button>\n\n        {progress > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"bg-gray-200 rounded-full h-4 mb-2\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-center\">{progress}% 完了</p>\n          </div>\n        )}\n\n        {downloadUrl && (\n          <a\n            href={downloadUrl}\n            download\n            className=\"block w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded text-center\"\n          >\n            <FaDownload className=\"inline-block mr-2\" /> 字幕ファイルをダウンロード\n          </a>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubtitleGeneration;"
        },
        {
          "fileName": "generate-subtitle-file.ts",
          "handleProcedure": "1. JSONファイルからテキストデータを取得\n2. テキストデータを解析し タイムスタンプと字幕テキストを抽出\n3. FCPXMLフォーマットに沿ってデータを構造化\n4. 構造化されたデータをFCPXMLファイルとして出力\n5. 生成されたFCPXMLファイルのURLを返す",
          "relatedScreen": "SCR-003",
          "handleName": "字幕ファイル生成",
          "description": "テキストデータから字幕付きFCPXMLファイルを生成する",
          "id": "BAC-002",
          "category": "変換処理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FaUpload, FaFont, FaFilter, FaPlay, FaDownload } from 'react-icons/fa';\n\nconst SubtitleGeneration = () => {\n  const router = useRouter();\n  const [videoFile, setVideoFile] = useState<File | null>(null);\n  const [subtitleDesign, setSubtitleDesign] = useState({\n    font: 'Noto Sans JP',\n    size: 16,\n    color: '#FFFFFF',\n    backgroundColor: '#000000',\n  });\n  const [filter, setFilter] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [downloadUrl, setDownloadUrl] = useState('');\n\n  useEffect(() => {\n    // ユーザーの認証状態を確認\n    const checkAuth = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setVideoFile(event.target.files[0]);\n    }\n  };\n\n  const handleSubtitleDesignChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setSubtitleDesign({ ...subtitleDesign, [e.target.name]: e.target.value });\n  };\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.target.value);\n  };\n\n  const handleConvert = async () => {\n    if (!videoFile) return;\n\n    setProgress(0);\n    setDownloadUrl('');\n\n    try {\n      // 音声テキスト変換\n      const formData = new FormData();\n      formData.append('video', videoFile);\n      const { data: speechToTextData } = await axios.post('/api/speech-to-text', formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n          setProgress(percentCompleted / 4);\n        },\n      });\n\n      // 字幕ファイル生成\n      const { data: subtitleFileData } = await axios.post('/api/generate-subtitle-file', {\n        textData: speechToTextData,\n        subtitleDesign,\n        filter,\n      });\n      setProgress(50);\n\n      // 要点抽出字幕生成\n      const { data: summarizedSubtitlesData } = await axios.post('/api/generate-summarized-subtitles', {\n        subtitleData: subtitleFileData,\n      });\n      setProgress(75);\n\n      // 話者別字幕スタイル適用\n      const { data: finalSubtitlesData } = await axios.post('/api/apply-speaker-styles', {\n        subtitleData: summarizedSubtitlesData,\n      });\n      setProgress(100);\n\n      setDownloadUrl(finalSubtitlesData.url);\n    } catch (error) {\n      console.error('変換エラー:', error);\n      alert('変換中にエラーが発生しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">字幕生成画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaUpload className=\"mr-2\" /> 動画アップロード\n          </h2>\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleVideoUpload}\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFont className=\"mr-2\" /> 字幕デザイン設定\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block mb-2\">フォント</label>\n              <select\n                name=\"font\"\n                value={subtitleDesign.font}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              >\n                <option value=\"Noto Sans JP\">Noto Sans JP</option>\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Helvetica\">Helvetica</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block mb-2\">サイズ</label>\n              <input\n                type=\"number\"\n                name=\"size\"\n                value={subtitleDesign.size}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">文字色</label>\n              <input\n                type=\"color\"\n                name=\"color\"\n                value={subtitleDesign.color}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">背景色</label>\n              <input\n                type=\"color\"\n                name=\"backgroundColor\"\n                value={subtitleDesign.backgroundColor}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFilter className=\"mr-2\" /> フィルター設定\n          </h2>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={handleFilterChange}\n            placeholder=\"フィルターワードをカンマ区切りで入力\"\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <button\n          onClick={handleConvert}\n          className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded flex items-center justify-center mb-8\"\n        >\n          <FaPlay className=\"mr-2\" /> 変換実行\n        </button>\n\n        {progress > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"bg-gray-200 rounded-full h-4 mb-2\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-center\">{progress}% 完了</p>\n          </div>\n        )}\n\n        {downloadUrl && (\n          <a\n            href={downloadUrl}\n            download\n            className=\"block w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded text-center\"\n          >\n            <FaDownload className=\"inline-block mr-2\" /> 字幕ファイルをダウンロード\n          </a>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubtitleGeneration;"
        },
        {
          "fileName": "generate-summarized-subtitles.ts",
          "handleProcedure": "1. テキストデータと学習データを取得\n2. 自然言語処理モデルを使用して重要な文や句を特定\n3. 抽出された要点を元の字幕データと統合\n4. 要点を強調した新しい字幕データを生成\n5. 生成された字幕データを返す",
          "relatedScreen": "SCR-003",
          "handleName": "要点抽出字幕生成",
          "description": "学習データを基に要点を抽出した字幕を生成する",
          "id": "BAC-003",
          "category": "要約",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FaUpload, FaFont, FaFilter, FaPlay, FaDownload } from 'react-icons/fa';\n\nconst SubtitleGeneration = () => {\n  const router = useRouter();\n  const [videoFile, setVideoFile] = useState<File | null>(null);\n  const [subtitleDesign, setSubtitleDesign] = useState({\n    font: 'Noto Sans JP',\n    size: 16,\n    color: '#FFFFFF',\n    backgroundColor: '#000000',\n  });\n  const [filter, setFilter] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [downloadUrl, setDownloadUrl] = useState('');\n\n  useEffect(() => {\n    // ユーザーの認証状態を確認\n    const checkAuth = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setVideoFile(event.target.files[0]);\n    }\n  };\n\n  const handleSubtitleDesignChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setSubtitleDesign({ ...subtitleDesign, [e.target.name]: e.target.value });\n  };\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.target.value);\n  };\n\n  const handleConvert = async () => {\n    if (!videoFile) return;\n\n    setProgress(0);\n    setDownloadUrl('');\n\n    try {\n      // 音声テキスト変換\n      const formData = new FormData();\n      formData.append('video', videoFile);\n      const { data: speechToTextData } = await axios.post('/api/speech-to-text', formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n          setProgress(percentCompleted / 4);\n        },\n      });\n\n      // 字幕ファイル生成\n      const { data: subtitleFileData } = await axios.post('/api/generate-subtitle-file', {\n        textData: speechToTextData,\n        subtitleDesign,\n        filter,\n      });\n      setProgress(50);\n\n      // 要点抽出字幕生成\n      const { data: summarizedSubtitlesData } = await axios.post('/api/generate-summarized-subtitles', {\n        subtitleData: subtitleFileData,\n      });\n      setProgress(75);\n\n      // 話者別字幕スタイル適用\n      const { data: finalSubtitlesData } = await axios.post('/api/apply-speaker-styles', {\n        subtitleData: summarizedSubtitlesData,\n      });\n      setProgress(100);\n\n      setDownloadUrl(finalSubtitlesData.url);\n    } catch (error) {\n      console.error('変換エラー:', error);\n      alert('変換中にエラーが発生しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">字幕生成画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaUpload className=\"mr-2\" /> 動画アップロード\n          </h2>\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleVideoUpload}\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFont className=\"mr-2\" /> 字幕デザイン設定\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block mb-2\">フォント</label>\n              <select\n                name=\"font\"\n                value={subtitleDesign.font}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              >\n                <option value=\"Noto Sans JP\">Noto Sans JP</option>\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Helvetica\">Helvetica</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block mb-2\">サイズ</label>\n              <input\n                type=\"number\"\n                name=\"size\"\n                value={subtitleDesign.size}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">文字色</label>\n              <input\n                type=\"color\"\n                name=\"color\"\n                value={subtitleDesign.color}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">背景色</label>\n              <input\n                type=\"color\"\n                name=\"backgroundColor\"\n                value={subtitleDesign.backgroundColor}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFilter className=\"mr-2\" /> フィルター設定\n          </h2>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={handleFilterChange}\n            placeholder=\"フィルターワードをカンマ区切りで入力\"\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <button\n          onClick={handleConvert}\n          className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded flex items-center justify-center mb-8\"\n        >\n          <FaPlay className=\"mr-2\" /> 変換実行\n        </button>\n\n        {progress > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"bg-gray-200 rounded-full h-4 mb-2\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-center\">{progress}% 完了</p>\n          </div>\n        )}\n\n        {downloadUrl && (\n          <a\n            href={downloadUrl}\n            download\n            className=\"block w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded text-center\"\n          >\n            <FaDownload className=\"inline-block mr-2\" /> 字幕ファイルをダウンロード\n          </a>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubtitleGeneration;"
        },
        {
          "fileName": "apply-speaker-styles.ts",
          "handleProcedure": "1. テキストデータと話者識別データを取得\n2. 話者識別アルゴリズムを使用して各発話の話者を特定\n3. 各話者に対して異なるスタイル（フォント 色）を割り当て\n4. 割り当てられたスタイルを字幕データに適用\n5. スタイルが適用された字幕データを返す",
          "relatedScreen": "SCR-003",
          "handleName": "話者別字幕スタイル適用",
          "description": "話者を識別し 話者ごとに異なるフォントや色を適用した字幕を生成する",
          "id": "BAC-004",
          "category": "話者識別",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FaUpload, FaFont, FaFilter, FaPlay, FaDownload } from 'react-icons/fa';\n\nconst SubtitleGeneration = () => {\n  const router = useRouter();\n  const [videoFile, setVideoFile] = useState<File | null>(null);\n  const [subtitleDesign, setSubtitleDesign] = useState({\n    font: 'Noto Sans JP',\n    size: 16,\n    color: '#FFFFFF',\n    backgroundColor: '#000000',\n  });\n  const [filter, setFilter] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [downloadUrl, setDownloadUrl] = useState('');\n\n  useEffect(() => {\n    // ユーザーの認証状態を確認\n    const checkAuth = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setVideoFile(event.target.files[0]);\n    }\n  };\n\n  const handleSubtitleDesignChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setSubtitleDesign({ ...subtitleDesign, [e.target.name]: e.target.value });\n  };\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.target.value);\n  };\n\n  const handleConvert = async () => {\n    if (!videoFile) return;\n\n    setProgress(0);\n    setDownloadUrl('');\n\n    try {\n      // 音声テキスト変換\n      const formData = new FormData();\n      formData.append('video', videoFile);\n      const { data: speechToTextData } = await axios.post('/api/speech-to-text', formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n          setProgress(percentCompleted / 4);\n        },\n      });\n\n      // 字幕ファイル生成\n      const { data: subtitleFileData } = await axios.post('/api/generate-subtitle-file', {\n        textData: speechToTextData,\n        subtitleDesign,\n        filter,\n      });\n      setProgress(50);\n\n      // 要点抽出字幕生成\n      const { data: summarizedSubtitlesData } = await axios.post('/api/generate-summarized-subtitles', {\n        subtitleData: subtitleFileData,\n      });\n      setProgress(75);\n\n      // 話者別字幕スタイル適用\n      const { data: finalSubtitlesData } = await axios.post('/api/apply-speaker-styles', {\n        subtitleData: summarizedSubtitlesData,\n      });\n      setProgress(100);\n\n      setDownloadUrl(finalSubtitlesData.url);\n    } catch (error) {\n      console.error('変換エラー:', error);\n      alert('変換中にエラーが発生しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">字幕生成画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaUpload className=\"mr-2\" /> 動画アップロード\n          </h2>\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleVideoUpload}\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFont className=\"mr-2\" /> 字幕デザイン設定\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block mb-2\">フォント</label>\n              <select\n                name=\"font\"\n                value={subtitleDesign.font}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              >\n                <option value=\"Noto Sans JP\">Noto Sans JP</option>\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Helvetica\">Helvetica</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block mb-2\">サイズ</label>\n              <input\n                type=\"number\"\n                name=\"size\"\n                value={subtitleDesign.size}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">文字色</label>\n              <input\n                type=\"color\"\n                name=\"color\"\n                value={subtitleDesign.color}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2\">背景色</label>\n              <input\n                type=\"color\"\n                name=\"backgroundColor\"\n                value={subtitleDesign.backgroundColor}\n                onChange={handleSubtitleDesignChange}\n                className=\"w-full p-2 border border-gray-300 rounded\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n            <FaFilter className=\"mr-2\" /> フィルター設定\n          </h2>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={handleFilterChange}\n            placeholder=\"フィルターワードをカンマ区切りで入力\"\n            className=\"w-full p-2 border border-gray-300 rounded\"\n          />\n        </div>\n\n        <button\n          onClick={handleConvert}\n          className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded flex items-center justify-center mb-8\"\n        >\n          <FaPlay className=\"mr-2\" /> 変換実行\n        </button>\n\n        {progress > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"bg-gray-200 rounded-full h-4 mb-2\">\n              <div\n                className=\"bg-blue-500 h-4 rounded-full\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-center\">{progress}% 完了</p>\n          </div>\n        )}\n\n        {downloadUrl && (\n          <a\n            href={downloadUrl}\n            download\n            className=\"block w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded text-center\"\n          >\n            <FaDownload className=\"inline-block mr-2\" /> 字幕ファイルをダウンロード\n          </a>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubtitleGeneration;"
        }
      ]
    },
    {
      "component": "動画アップロードエリア 学習実行ボタン プログレスバー 学習履歴リスト",
      "accessRight": "ログインユーザー",
      "fileName": "learning.tsx",
      "operatingProcedure": "1. 学習用動画をアップロード\n2. 学習を実行\n3. 学習完了後 結果が表示される\n4. 学習履歴リストで過去の学習状況を確認可能",
      "description": "学習用の動画をアップロードし システムの精度を向上させる画面",
      "id": "SCR-004",
      "screenName": "学習画面",
      "category": "学習",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": [
        {
          "fileName": "add-training-data.ts",
          "handleProcedure": "1. アップロードされたFCPXMLファイルを解析\n2. 字幕データを抽出し 適切な形式に変換\n3. 既存の学習データと統合\n4. 統合されたデータを機械学習モデルに適用\n5. 更新された学習モデルを保存\n6. 学習完了ステータスを返す",
          "relatedScreen": "SCR-004",
          "handleName": "学習データ追加",
          "description": "アップロードされた字幕付きFCPXMLファイルを読み込み 学習データとして追加する",
          "id": "BAC-006",
          "category": "学習",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FiUpload, FiPlay, FiList } from 'react-icons/fi';\nimport axios from 'axios';\n\nconst LearningPage = () => {\n  const router = useRouter();\n  const [file, setFile] = useState<File | null>(null);\n  const [progress, setProgress] = useState(0);\n  const [learningHistory, setLearningHistory] = useState<any[]>([]);\n  const [isLearning, setIsLearning] = useState(false);\n\n  useEffect(() => {\n    fetchLearningHistory();\n  }, []);\n\n  const fetchLearningHistory = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('training_videos')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setLearningHistory(data || []);\n    } catch (error) {\n      console.error('学習履歴の取得に失敗しました:', error);\n      setLearningHistory([\n        { id: 1, video_url: 'https://example.com/video1.mp4', created_at: '2023-06-01T12:00:00Z' },\n        { id: 2, video_url: 'https://example.com/video2.mp4', created_at: '2023-06-02T14:30:00Z' },\n      ]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n\n  const handleLearning = async () => {\n    if (!file) return;\n\n    setIsLearning(true);\n    setProgress(0);\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await axios.post('/api/add-training-data', formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentage = (progressEvent.loaded / (progressEvent.total || 1)) * 100;\n          setProgress(Math.round(percentage));\n        },\n      });\n\n      if (response.data.success) {\n        alert('学習が完了しました');\n        fetchLearningHistory();\n      } else {\n        throw new Error('学習に失敗しました');\n      }\n    } catch (error) {\n      console.error('学習中にエラーが発生しました:', error);\n      alert('学習中にエラーが発生しました');\n    } finally {\n      setIsLearning(false);\n      setProgress(0);\n      setFile(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Head>\n        <title>学習画面 - 字幕生成システム</title>\n        <meta name=\"description\" content=\"学習用の動画をアップロードし システムの精度を向上させる画面\" />\n      </Head>\n\n      <Topbar />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">学習画面</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 text-gray-700\">動画アップロード</h2>\n          <div className=\"flex items-center justify-center w-full\">\n            <label htmlFor=\"dropzone-file\" className=\"flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\">\n              <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                <FiUpload className=\"w-10 h-10 mb-3 text-gray-400\" />\n                <p className=\"mb-2 text-sm text-gray-500\"><span className=\"font-semibold\">クリックしてアップロード</span> または ドラッグ&ドロップ</p>\n                <p className=\"text-xs text-gray-500\">FCPXML (最大 100MB)</p>\n              </div>\n              <input id=\"dropzone-file\" type=\"file\" className=\"hidden\" onChange={handleFileChange} accept=\".fcpxml\" />\n            </label>\n          </div>\n          {file && <p className=\"mt-2 text-sm text-gray-600\">選択されたファイル: {file.name}</p>}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 text-gray-700\">学習実行</h2>\n          <button\n            onClick={handleLearning}\n            disabled={!file || isLearning}\n            className={`flex items-center justify-center px-4 py-2 rounded-md text-white ${\n              !file || isLearning ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            <FiPlay className=\"mr-2\" />\n            {isLearning ? '学習中...' : '学習を開始'}\n          </button>\n          {isLearning && (\n            <div className=\"mt-4\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div className=\"bg-blue-600 h-2.5 rounded-full\" style={{ width: `${progress}%` }}></div>\n              </div>\n              <p className=\"mt-2 text-sm text-gray-600\">{progress}% 完了</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-2xl font-semibold mb-4 text-gray-700\">学習履歴</h2>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm text-left text-gray-500\">\n              <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\n                <tr>\n                  <th scope=\"col\" className=\"px-6 py-3\">ID</th>\n                  <th scope=\"col\" className=\"px-6 py-3\">動画URL</th>\n                  <th scope=\"col\" className=\"px-6 py-3\">作成日時</th>\n                </tr>\n              </thead>\n              <tbody>\n                {learningHistory.map((item) => (\n                  <tr key={item.id} className=\"bg-white border-b\">\n                    <td className=\"px-6 py-4\">{item.id}</td>\n                    <td className=\"px-6 py-4\">{item.video_url}</td>\n                    <td className=\"px-6 py-4\">{new Date(item.created_at).toLocaleString()}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default LearningPage;"
        }
      ]
    },
    {
      "component": "フィルター一覧 フィルター追加フォーム 保存ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "filter-settings.tsx",
      "operatingProcedure": "1. 既存のフィルターを確認・編集\n2. 新しいフィルターを追加\n3. 変更を保存",
      "description": "字幕生成時に使用するフィルターを設定する画面",
      "id": "SCR-005",
      "screenName": "フィルター設定画面",
      "category": "設定",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": []
    },
    {
      "component": "フォント選択ドロップダウン フォントサイズ入力 色選択パレット プレビュー表示エリア 保存ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "subtitle-design-settings.tsx",
      "operatingProcedure": "1. フォントを選択\n2. フォントサイズを入力\n3. フォント色と背景色を選択\n4. プレビューで確認\n5. 設定を保存",
      "description": "字幕のフォントや色などのデザインを設定する画面",
      "id": "SCR-006",
      "screenName": "字幕デザイン設定画面",
      "category": "設定",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": []
    },
    {
      "component": "ダウンロードボタン プレビュー表示エリア 編集ソフト選択ドロップダウン",
      "accessRight": "ログインユーザー",
      "fileName": "download.tsx",
      "operatingProcedure": "1. 編集ソフトを選択（Final Cut ProやPremiere Pro）\n2. プレビューで確認\n3. ダウンロードボタンをクリックしてファイルをダウンロード",
      "description": "生成された字幕ファイルをダウンロードする画面",
      "id": "SCR-007",
      "screenName": "ダウンロード画面",
      "category": "結果",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": [
        {
          "fileName": "export-project-file.ts",
          "handleProcedure": "1. 字幕データを取得\n2. 選択された編集ソフトのプロジェクトファイルフォーマットを特定\n3. 字幕データを該当するフォーマットに変換\n4. プロジェクトファイルを生成\n5. 生成されたプロジェクトファイルのURLを返す",
          "relatedScreen": "SCR-007",
          "handleName": "編集ソフト用プロジェクトファイル出力",
          "description": "Final Cut ProやPremiere Pro用のプロジェクトファイルとして字幕データを出力する",
          "id": "BAC-005",
          "category": "出力",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaDownload, FaEye } from 'react-icons/fa';\nimport axios from 'axios';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\n\nconst DownloadPage = () => {\n  const router = useRouter();\n  const [selectedSoftware, setSelectedSoftware] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [downloadUrl, setDownloadUrl] = useState('');\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        router.push('/login');\n      }\n    };\n    checkAuth();\n  }, [router]);\n\n  const handleSoftwareChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedSoftware(e.target.value);\n  };\n\n  const handlePreview = async () => {\n    try {\n      const response = await axios.get('/api/export-project-file', {\n        params: { software: selectedSoftware, preview: true }\n      });\n      setPreviewUrl(response.data.previewUrl);\n    } catch (error) {\n      console.error('プレビューの取得に失敗しました', error);\n      setPreviewUrl('https://placehold.co/600x400?text=プレビュー失敗');\n    }\n  };\n\n  const handleDownload = async () => {\n    try {\n      const response = await axios.get('/api/export-project-file', {\n        params: { software: selectedSoftware }\n      });\n      setDownloadUrl(response.data.downloadUrl);\n    } catch (error) {\n      console.error('ダウンロードURLの取得に失敗しました', error);\n      alert('ダウンロードに失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">ダウンロード画面</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"software\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              編集ソフトを選択\n            </label>\n            <select\n              id=\"software\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={selectedSoftware}\n              onChange={handleSoftwareChange}\n            >\n              <option value=\"\">選択してください</option>\n              <option value=\"finalcut\">Final Cut Pro</option>\n              <option value=\"premiere\">Premiere Pro</option>\n            </select>\n          </div>\n          <div className=\"flex space-x-4 mb-6\">\n            <button\n              onClick={handlePreview}\n              className=\"flex items-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-300\"\n              disabled={!selectedSoftware}\n            >\n              <FaEye className=\"mr-2\" />\n              プレビュー\n            </button>\n            <button\n              onClick={handleDownload}\n              className=\"flex items-center px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition duration-300\"\n              disabled={!selectedSoftware}\n            >\n              <FaDownload className=\"mr-2\" />\n              ダウンロード\n            </button>\n          </div>\n          {previewUrl && (\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold mb-2\">プレビュー</h2>\n              <img src={previewUrl} alt=\"プレビュー\" className=\"w-full max-w-2xl mx-auto rounded-lg shadow-md\" />\n            </div>\n          )}\n          {downloadUrl && (\n            <div className=\"text-center\">\n              <a\n                href={downloadUrl}\n                download\n                className=\"inline-block px-6 py-3 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-600 transition duration-300\"\n              >\n                プロジェクトファイルをダウンロード\n              </a>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DownloadPage;"
        }
      ]
    },
    {
      "component": "メニューアイコン メニューリスト（ホーム 字幕生成 学習 設定 ログアウト）",
      "accessRight": "ログインユーザー",
      "fileName": "components/HamburgerMenu.tsx",
      "operatingProcedure": "1. メニューアイコンをクリック\n2. 表示されたメニューリストから目的の項目を選択\n3. 選択した画面に遷移",
      "description": "各画面へのナビゲーションリンクを提供するメニュー",
      "id": "SCR-008",
      "screenName": "ハンバーガーメニュー",
      "category": "ナビゲーション",
      "user": "動画制作者 コンテンツクリエイター 企業の広報担当者",
      "relatedBackendHandles": []
    }
  ]
}
